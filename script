local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

local Window = Fluent:CreateWindow({
    Title = "kzHub | " .. GameName,
    SubTitle = "by _kuzja",
    TabWidth = 140,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Rifts = Window:AddTab({ Title = "Rifts", Icon = "" })
}

local riftFolder = workspace:WaitForChild("Rendered"):WaitForChild("Rifts")

local modelNames = {}
local modelReference = {}

for _, model in ipairs(riftFolder:GetChildren()) do
    if model:IsA("Model") then
        local modelName = model.Name
        
        if modelName == "event-1" then
            modelName = "bunny-egg"
        elseif modelName == "event-2" then
            modelName = "pastel-egg"
        elseif modelName == "event-3" then
            modelName = "throwback-egg"
        end

        local luckText
        pcall(function()
            luckText = model.Display.SurfaceGui.Icon.Luck.Text
        end)

        local finalName = modelName
        if luckText and luckText ~= "" then
            finalName = modelName .. " [" .. luckText .. "]"
        end

        table.insert(modelNames, finalName)
        modelReference[finalName] = model
    end
end

local selectedRiftName = nil

local Dropdown = Tabs.Rifts:AddDropdown("Dropdown", {
    Title = "Select Rifts",
    Values = modelNames,
    Multi = false,
    Default = 1,
    Callback = function(Value)
        selectedRiftName = Value
    end
})

local flightSpeed = 50

Tabs.Rifts:AddSlider("FlightSpeed", {
    Title = "Flight Speed",
    Description = "Set the flight speed",
    Default = 50,
    Min = 10,
    Max = 300,
    Rounding = 1,
    Callback = function(Value)
        flightSpeed = Value
    end
})

local activeTween = nil
local flying = false
local bodyVelocity = nil

Tabs.Rifts:AddToggle("FlyToRift", {
    Title = "Fly to Rift",
    Description = "Fly towards selected Rift",
    Default = false,
    Callback = function(State)
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        local humanoid = character:FindFirstChildWhichIsA("Humanoid")

        flying = State

        if State then
            if selectedRiftName and modelReference[selectedRiftName] then
                local riftModel = modelReference[selectedRiftName]
                local targetPos = riftModel:GetPivot().Position + Vector3.new(0, 5, 0)

                local distance = (hrp.Position - targetPos).Magnitude
                local duration = distance / flightSpeed

                local tweenInfo = TweenInfo.new(
                    duration,
                    Enum.EasingStyle.Quad,
                    Enum.EasingDirection.Out
                )

                local goal = {CFrame = CFrame.new(targetPos)}
                activeTween = TweenService:Create(hrp, tweenInfo, goal)
                activeTween:Play()

                activeTween.Completed:Connect(function()
                    activeTween = nil
                    flying = false
                end)

                humanoid.PlatformStand = true
            end
        else
            if activeTween then
                activeTween:Cancel()
                activeTween = nil
            end

            if humanoid then
                humanoid.PlatformStand = false
            end
        end
    end
})

local autoE = false
local autoR = false

Tabs.Rifts:AddToggle("AutoE", {
    Title = "Auto E",
    Description = "Auto-press E",
    Default = false,
    Callback = function(State)
        autoE = State
    end
})

Tabs.Rifts:AddToggle("AutoR", {
    Title = "Auto R",
    Description = "Auto-press R",
    Default = false,
    Callback = function(State)
        autoR = State
    end
})

RunService.RenderStepped:Connect(function()
    if autoE then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    end
    if autoR then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.R, false, game)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.R, false, game)
    end
end)
