local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")


local statusLabel = Instance.new("TextLabel")
local textConstraint = Instance.new("UITextSizeConstraint")

-- Ustawienia wyglÄ…du TextLabel
statusLabel.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("ScreenGui")
statusLabel.BackgroundColor3 = Color3.new(1, 1, 1)
statusLabel.BackgroundTransparency = 1
statusLabel.BorderSizePixel = 0
statusLabel.Position = UDim2.new(0.5, 0, 0.05, 0)
statusLabel.AnchorPoint = Vector2.new(0.5, 0)
statusLabel.Size = UDim2.new(0, 900, 0, 50)
statusLabel.Font = Enum.Font.FredokaOne
statusLabel.Text = ""
statusLabel.TextColor3 = Color3.fromRGB(229, 229, 229)
statusLabel.TextScaled = true
statusLabel.TextStrokeTransparency = 0
statusLabel.TextWrapped = true

textConstraint.Parent = statusLabel
textConstraint.MaxTextSize = 20

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name

local Window = Fluent:CreateWindow({
    Title = "kzHub | " .. GameName,
    SubTitle = "by _kuzja",
    TabWidth = 140,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Rifts = Window:AddTab({ Title = "Rifts", Icon = "" })
}

Tabs.Rifts:AddParagraph({
    Title = "Flight Speed For Rifts",
    Content = "Set the fly speed!"
})

local flightSpeed = 100

Tabs.Rifts:AddSlider("FlightSpeed", {
    Title = "Flight Speed",
    Description = "You can set there flight speed",
    Default = 100,
    Min = 10,
    Max = 300,
    Rounding = 1,
    Callback = function(Value)
        flightSpeed = Value
    end
})

Tabs.Rifts:AddParagraph({
    Title = "Go to selected rift",
    Content = "Tween to rift that u want"
})

local autoTweenNearest = false
local autoTweenSpeed = 15
local currentTween = nil
local autoTweenFlying = false

Tabs.Main:AddToggle("AutoTweenNearest", {
    Title = "Auto Tween to Nearest",
    Description = "Automatically tween to nearest rift",
    Default = false,
    Callback = function(State)
        autoTweenNearest = State
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildWhichIsA("Humanoid")

        if State then
            if hrp then
    			hrp.Velocity = Vector3.new(0, 0, 0)
    			hrp.RotVelocity = Vector3.new(0, 0, 0)
			end
			if humanoid then
    			humanoid.PlatformStand = false
			end

            autoTweenFlying = true
        else
            if humanoid then
                humanoid.PlatformStand = false
            end
            autoTweenFlying = false
            if currentTween then
                currentTween:Cancel()
                currentTween = nil
            end
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
})

Tabs.Main:AddSlider("AutoTweenSpeed", {
    Title = "Tween Speed",
    Description = "Set speed of auto tween",
    Default = 15,
    Min = 5,
    Max = 35,
    Rounding = 1,
    Callback = function(Value)
        autoTweenSpeed = Value
    end
})

RunService.RenderStepped:Connect(function()
    if autoTweenNearest then
        local player = Players.LocalPlayer
        local character = player.Character
        if not character then return end

        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end

        local modelsFolder = workspace:WaitForChild("Rendered"):GetChildren()[14]
        if not modelsFolder or not modelsFolder:IsA("Folder") then return end

        local nearestModel
        local shortestDistance = math.huge

        for _, model in ipairs(modelsFolder:GetChildren()) do
            if model:IsA("Model") then
                local modelPos = model:GetPivot().Position
                local distance = (hrp.Position - modelPos).Magnitude

                if distance < shortestDistance then
                    shortestDistance = distance
                    nearestModel = model
                end
            end
        end

        if nearestModel then
            local targetPos = nearestModel:GetPivot().Position + Vector3.new(0, 5, 0)
            local distance = (hrp.Position - targetPos).Magnitude
            local duration = distance / autoTweenSpeed

            if currentTween then
                currentTween:Cancel()
            end

            local tweenInfo = TweenInfo.new(
                duration,
                Enum.EasingStyle.Quad,
                Enum.EasingDirection.Out
            )
            local goal = {CFrame = CFrame.new(targetPos)}
            currentTween = TweenService:Create(hrp, tweenInfo, goal)
            currentTween:Play()
        end

        if autoTweenFlying then
            hrp.Velocity = Vector3.new(0, 0, 0)
        end
    end
end)

local riftFolder = workspace:WaitForChild("Rendered"):WaitForChild("Rifts")
local modelNames = {}
local modelReference = {}

for _, model in ipairs(riftFolder:GetChildren()) do
    if model:IsA("Model") then
        local modelName = model.Name
        
        if modelName == "event-1" then
            modelName = "bunny-egg"
        elseif modelName == "event-2" then
            modelName = "pastel-egg"
        elseif modelName == "event-3" then
            modelName = "throwback-egg"
        end

        local luckText
        pcall(function()
            luckText = model.Display.SurfaceGui.Icon.Luck.Text
        end)

        local finalName = modelName
        if luckText and luckText ~= "" then
            finalName = modelName .. " [" .. luckText .. "]"
        end

        table.insert(modelNames, finalName)
        modelReference[finalName] = model
    end
end

local selectedRiftName = nil

local Dropdown = Tabs.Rifts:AddDropdown("Dropdown", {
    Title = "Select Rifts",
    Values = modelNames,
    Multi = false,
    Default = 1,
    Callback = function(Value)
        selectedRiftName = Value
    end
})

local flyingToRift = false
local selectedTarget = nil

Tabs.Rifts:AddToggle("FlyToRift", {
    Title = "Fly to Rift",
    Description = "Fly to selected Rift",
    Default = false,
    Callback = function(State)
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        local humanoid = character:FindFirstChildWhichIsA("Humanoid")

        flyingToRift = State

        if State then
            if selectedRiftName and modelReference[selectedRiftName] then
                selectedTarget = modelReference[selectedRiftName]
                humanoid.PlatformStand = true
            end
        else
            selectedTarget = nil
            if hrp then
                hrp.Velocity = Vector3.new(0, 0, 0)
                hrp.RotVelocity = Vector3.new(0, 0, 0)
            end
            if humanoid then
                humanoid.PlatformStand = false
            end
        end
    end
})

RunService.RenderStepped:Connect(function()
    if flyingToRift and selectedTarget then
        local player = Players.LocalPlayer
        local character = player.Character
        if not character then return end

        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        if not selectedTarget or not selectedTarget.Parent then
            flyingToRift = false
            return
        end

        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end

        local targetPos = selectedTarget:GetPivot().Position + Vector3.new(0, 5, 0)
        local direction = (targetPos - hrp.Position).Unit
        local distance = (targetPos - hrp.Position).Magnitude

        hrp.Velocity = direction * flightSpeed

        if distance < 5 then
            hrp.Velocity = Vector3.new(0, 0, 0)
        end
    end
end)

Tabs.Rifts:AddParagraph({
    Title = "Auto hunt for rifts",
    Content = "Select rifts u want, tween to them and auto open"
})


local autoRiftHunt = false
local selectedEggName = "-"

local eggList = {
    "rainbow-egg", "void-egg", "hell-egg", "nightmare-egg", "lunar-egg",
    "magma-egg", "crystal-egg", "spikey-egg", "bunny-egg", "pastel-egg", "throwback-egg"
}

Tabs.Rifts:AddDropdown("EggDropdown", {
    Title = "Select Egg for Auto Rift Hunt",
    Values = eggList,
    Multi = false,
    Default = 1,
    Callback = function(Value)
        selectedEggName = Value
    end
})

Tabs.Rifts:AddToggle("AutoRiftHunt", {
    Title = "Auto Rift Hunt",
    Description = "Auto hunts selected egg with highest Luck",
    Default = false,
    Callback = function(State)
        autoRiftHunt = State
    end
})

local bodyVelocity

RunService.RenderStepped:Connect(function()
    if autoRiftHunt then
        local player = Players.LocalPlayer
        local character = player.Character
        if not character then return end

        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        local riftFolder = workspace:FindFirstChild("Rendered") and workspace.Rendered:FindFirstChild("Rifts")
        if not riftFolder then return end

        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end

        local bestEgg = nil
        local bestLuck = -math.huge
        local bestLuckText = nil
        local shortestDistance = math.huge

        for _, model in ipairs(riftFolder:GetChildren()) do
            if model:IsA("Model") then
                local modelName = model.Name

                if modelName == "event-1" then modelName = "bunny-egg" end
                if modelName == "event-2" then modelName = "pastel-egg" end
                if modelName == "event-3" then modelName = "throwback-egg" end

                if modelName == selectedEggName then
                    local luckValue = 0
                    local luckText = nil

                    pcall(function()
                        luckText = model.Display.SurfaceGui.Icon.Luck.Text
                        if luckText and luckText ~= "" then
                            luckValue = tonumber(luckText:gsub("x", "")) or 0
                        end
                    end)

                    local modelPos = model:GetPivot().Position
                    local distance = (hrp.Position - modelPos).Magnitude

                    if luckValue > bestLuck or (luckValue == bestLuck and distance < shortestDistance) then
                        bestEgg = model
                        bestLuck = luckValue
                        bestLuckText = luckText
                        shortestDistance = distance
                    end
                end
            end
        end

        if bestEgg then
            if not bodyVelocity then
                bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.MaxForce = Vector3.new(1e9, 1e9, 1e9)
                bodyVelocity.Parent = hrp
            end

            local timerText = "Unknown"
            pcall(function()
                timerText = bestEgg.Display.SurfaceGui.Timer.Text
            end)
            statusLabel.Visible = true
            statusLabel.Text = "Going to " .. selectedEggName .. " (" .. (bestLuckText or "??") .. "), rift time left: " .. timerText

            local targetPos = bestEgg:GetPivot().Position + Vector3.new(0, 5, 0)
            local direction = (targetPos - hrp.Position).Unit
            bodyVelocity.Velocity = direction * flightSpeed

            if (hrp.Position - targetPos).Magnitude <= 5 then
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.R, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.R, false, game)
				wait(0.08)

                statusLabel.Text = "Opening " .. selectedEggName .. " (" .. (bestLuckText or "??") .. "), rift time left: " .. timerText

                bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                bodyVelocity:Destroy()
                bodyVelocity = nil

                local humanoid = character:FindFirstChildWhichIsA("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = true
                end
                hrp.Anchored = true
            end
        else
            statusLabel.Visible = true
            statusLabel.Text = "Waiting for " .. selectedEggName .. " to appear!"
        end
    else
        if bodyVelocity then
            bodyVelocity:Destroy()
            bodyVelocity = nil
        end
        statusLabel.Visible = false

        local character = Players.LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChildWhichIsA("Humanoid")
            if humanoid then
                humanoid.PlatformStand = false
            end
            local hrp = character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.Anchored = false
            end
        end
    end
end)

Tabs.Rifts:AddParagraph({
    Title = "Auto interact",
    Content = "You can set there auto interact for eggs etc."
})

local autoE = false
local autoR = false

Tabs.Rifts:AddToggle("AutoE", {
    Title = "Auto E",
    Description = "Auto press E",
    Default = false,
    Callback = function(State)
        autoE = State
    end
})

Tabs.Rifts:AddToggle("AutoR", {
    Title = "Auto R",
    Description = "Auto press R",
    Default = false,
    Callback = function(State)
        autoR = State
    end
})

RunService.RenderStepped:Connect(function()
    if autoE then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        wait(0.08)
    end
    if autoR then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.R, false, game)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.R, false, game)
        wait(0.08)
    end
end)
